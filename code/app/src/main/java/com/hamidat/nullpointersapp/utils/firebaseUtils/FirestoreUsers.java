package com.hamidat.nullpointersapp.utils.firebaseUtils;

import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import java.util.HashMap;
import java.util.Map;

/**
 * Handles user-related Firestore operations.
 */
public class FirestoreUsers {
    private static final String USERS_COLLECTION = "users";
    private FirebaseFirestore firestore;

    public FirestoreUsers(FirebaseFirestore firestore) {
        this.firestore = firestore;
    }

    /**
     * Adds a new user using an auto-generated document ID.
     * Stores both the username and password.
     */
    public void addUser(String userName, String password, FirestoreHelper.FirestoreCallback callback) {
        Map<String, Object> userFields = new HashMap<>();
        userFields.put("username", userName);
        userFields.put("password", password);

        firestore.collection(USERS_COLLECTION)
                .add(userFields)
                .addOnSuccessListener(documentReference ->
                        callback.onSuccess("User added with ID: " + documentReference.getId()))
                .addOnFailureListener(callback::onFailure);
    }

    /**
     * Retrieves user information by userID.
     */
    public void getUser(String userID, FirestoreHelper.FirestoreCallback callback) {
        firestore.collection(USERS_COLLECTION)
                .document(userID)
                .get()
                .addOnSuccessListener(documentSnapshot -> {
                    if (documentSnapshot.exists()) {
                        callback.onSuccess(documentSnapshot.getData());
                    } else {
                        callback.onFailure(new Exception("User not found"));
                    }
                })
                .addOnFailureListener(callback::onFailure);
    }

    /**
     * Retrieves user information by username.
     * Returns a Map containing username, password, and the autogenerated UID.
     */
    public void getUserByUsername(String username, FirestoreHelper.FirestoreCallback callback) {
        firestore.collection(USERS_COLLECTION)
                .whereEqualTo("username", username)
                .get()
                .addOnSuccessListener(querySnapshot -> {
                    if (querySnapshot.isEmpty()) {
                        callback.onFailure(new Exception("User not found"));
                    } else {
                        DocumentSnapshot doc = querySnapshot.getDocuments().get(0);
                        Map<String, Object> userData = doc.getData();
                        userData.put("userId", doc.getId());
                        callback.onSuccess(userData);
                    }
                })
                .addOnFailureListener(callback::onFailure);
    }
}
